apply plugin: 'com.android.library'

android {
    useLibrary 'org.apache.http.legacy'
    compileSdkVersion 25
    buildToolsVersion '25.0.2'

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile 'junit:junit:4.12'
    compile files('libs/libammsdk.jar')
    compile files('libs/alipaySdk-20160516.jar')
}

////task to delete the old jar
//task deleteOldJar(type: Delete) {
//    delete 'release/AndroidPlugin.jar'
//}

////task to export contents as jar
//task exportJar(type: Copy) {
//    from('build/intermediates/bundles/release/')
//    into('release/')
//    include('classes.jar')
//    ///Rename the jar
//    rename('classes.jar', 'AndroidPlugin.jar')
//}
//
//exportJar.dependsOn(deleteOldJar, build)

// This is the actual solution, as in Page on stackoverflow.com
task deleteJar(type: Delete) {
    delete 'release/myCompiledLibrary.jar'
}

task makeJar(type: Copy) {
    from('build/intermediates/bundles/release/')
    into('release/')
    include('classes.jar')
    rename ('classes.jar', 'myCompiledLibrary.jar')
}

makeJar.dependsOn(deleteJar,build)

